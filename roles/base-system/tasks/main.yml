---
- name: Install essential system packages
  ansible.builtin.package:
    name:
      # Build tools
      - build-essential
      # System utilities
      - curl
      - wget
      - htop
      - unzip
      - openssh-server
      - tar
      - tree
      # Development tools
      - tmux
      - git
      - silversearcher-ag
      - stow
      # Python
      - python3-dev
      - python3-pip
      - python3-venv
      # Utils
      - bat
      - ffmpeg
      - htop
      - jq
      - lsof
      # Misc
      - lua5.1
      - nvtop
      - vifm
      - webp
      - wget
      - xclip
    state: present
  become: true

- name: Create projects directory
  ansible.builtin.file:
    path: "{{ home_dir }}/projects"
    state: directory
    mode: '0755'
  become: false

- name: Install Neovim from GitHub
  ansible.builtin.get_url:
    url: "https://github.com/neovim/neovim/releases/download/{{ neovim_version }}/nvim-linux64.tar.gz"
    dest: /tmp/neovim.tar.gz
  register: neovim_download
  become: true

- name: Extract Neovim
  ansible.builtin.unarchive:
    src: /tmp/neovim.tar.gz
    dest: /tmp
    remote_src: yes
  when: neovim_download.changed
  become: true

- name: Move Neovim
  ansible.builtin.copy:
    src: /tmp/nvim-linux64/bin/nvim
    dest: /usr/local/bin/nvim
    mode: '0755'
    remote_src: true
  when: neovim_download.changed
  become: true

- name: Check if running in distrobox
  ansible.builtin.stat:
    path: "/.containersetupdone"
  register: containerenv

- name: Set timezone
  ansible.builtin.timezone:
    name: America/Chicago
  become: true
  when: not containerenv.stat.exists

- name: Copy timezone from host (distrobox environment)
  ansible.builtin.shell: |
    cp /etc/timezone /etc/timezone.bak || true
    cp /usr/share/zoneinfo/America/Chicago /etc/localtime || true
  become: true
  when: containerenv.stat.exists
  ignore_errors: true

- name: Install fzf from GitHub
  ansible.builtin.get_url:
    url: "https://github.com/junegunn/fzf/releases/download/v{{ fzf_version }}/fzf-{{ fzf_version }}-linux_amd64.tar.gz"
    dest: /tmp/fzf.tar.gz
  register: fzf_download
  become: true

- name: Extract fzf
  ansible.builtin.unarchive:
    src: /tmp/fzf.tar.gz
    dest: /usr/local/bin
    remote_src: yes
  when: fzf_download.changed
  become: true

- name: Set permissions for fzf
  ansible.builtin.file:
    path: /usr/local/bin/fzf
    mode: '0755'
  when: fzf_download.changed
  become: true

- name: Install Atuin from GitHub
  ansible.builtin.get_url:
    url: "https://github.com/atuinsh/atuin/releases/download/{{ atuin_version }}/atuin-x86_64-unknown-linux-gnu.tar.gz"
    dest: /tmp/atuin.tar.gz
  register: atuin_download
  become: true

- name: Extract Atuin
  ansible.builtin.unarchive:
    src: /tmp/atuin.tar.gz
    dest: /tmp/
    remote_src: yes
  when: atuin_download.changed
  become: true

- name: Move Atuin
  ansible.builtin.copy:
    src: /tmp/atuin-x86_64-unknown-linux-gnu/atuin
    dest: /usr/local/bin/atuin
    mode: '0755'
    remote_src: true
  when: atuin_download.changed
  become: true

- name: Set permissions for Atuin
  ansible.builtin.file:
    path: /usr/local/bin/atuin
    mode: '0755'
  when: atuin_download.changed
  become: true

- name: Install ripgrep from GitHub
  ansible.builtin.get_url:
    url: "https://github.com/BurntSushi/ripgrep/releases/download/{{ ripgrep_version }}/ripgrep-{{ ripgrep_version }}-x86_64-unknown-linux-musl.tar.gz"
    dest: /tmp/ripgrep.tar.gz
  register: ripgrep_download
  become: true

- name: Extract ripgrep
  ansible.builtin.unarchive:
    src: /tmp/ripgrep.tar.gz
    dest: /usr/local/bin
    remote_src: yes
    extra_opts: --strip-components=1
  when: ripgrep_download.changed
  become: true

- name: Set permissions for ripgrep
  ansible.builtin.file:
    path: /usr/local/bin/rg
    mode: '0755'
  when: ripgrep_download.changed
  become: true

- name: Install dust from GitHub
  ansible.builtin.get_url:
    url: "https://github.com/bootandy/dust/releases/download/{{ dust_version }}/dust-{{ dust_version }}-x86_64-unknown-linux-musl.tar.gz"
    dest: /tmp/dust.tar.gz
  register: dust_download
  become: true

- name: Extract dust
  ansible.builtin.unarchive:
    src: /tmp/dust.tar.gz
    dest: /usr/local/bin
    remote_src: yes
    extra_opts: --strip-components=1
  when: dust_download.changed
  become: true

- name: Set permissions for dust
  ansible.builtin.file:
    path: /usr/local/bin/dust
    mode: '0755'
  when: dust_download.changed
  become: true

- name: Install bandwhich from GitHub
  ansible.builtin.get_url:
    url: "https://github.com/imsnif/bandwhich/releases/download/{{ bandwhich_version }}/bandwhich-{{ bandwhich_version }}-x86_64-unknown-linux-musl.tar.gz"
    dest: /tmp/bandwhich.tar.gz
  register: bandwhich_download
  become: true

- name: Extract bandwhich
  ansible.builtin.unarchive:
    src: /tmp/bandwhich.tar.gz
    dest: /usr/local/bin
    remote_src: yes
  when: bandwhich_download.changed
  become: true

- name: Set permissions for bandwhich
  ansible.builtin.file:
    path: /usr/local/bin/bandwhich
    mode: '0755'
  when: bandwhich_download.changed
  become: true

- name: Install tealdeer from GitHub
  ansible.builtin.get_url:
    url: "https://github.com/dbrgn/tealdeer/releases/download/{{ tealdeer_version }}/tealdeer-linux-x86_64-musl"
    dest: /usr/local/bin/tldr
    mode: '0755'
  become: true

- name: Install grex from GitHub
  ansible.builtin.get_url:
    url: "https://github.com/pemistahl/grex/releases/download/{{ grex_version }}/grex-{{ grex_version }}-x86_64-unknown-linux-musl.tar.gz"
    dest: /tmp/grex.tar.gz
  register: grex_download
  become: true

- name: Extract grex
  ansible.builtin.unarchive:
    src: /tmp/grex.tar.gz
    dest: /usr/local/bin
    remote_src: yes
  when: grex_download.changed
  become: true

- name: Set permissions for grex
  ansible.builtin.file:
    path: /usr/local/bin/grex
    mode: '0755'
  when: grex_download.changed
  become: true

- name: Install systemctl-tui from GitHub
  ansible.builtin.get_url:
    url: "https://github.com/rgwood/systemctl-tui/releases/download/{{ systemctl_tui_version }}/systemctl-tui-x86_64-unknown-linux-musl.tar.gz"
    dest: /tmp/systemctl-tui.tar.gz
  register: systemctl_tui_download
  become: true

- name: Extract systemctl-tui
  ansible.builtin.unarchive:
    src: /tmp/systemctl-tui.tar.gz
    dest: /usr/local/bin
    remote_src: yes
  when: systemctl_tui_download.changed
  become: true

- name: Set permissions for systemctl-tui
  ansible.builtin.file:
    path: /usr/local/bin/systemctl-tui
    mode: '0755'
  when: systemctl_tui_download.changed
  become: true

- name: Install bottom
  ansible.builtin.get_url:
    url: "https://github.com/ClementTsang/bottom/releases/download/{{ bottom_version }}/bottom_x86_64-unknown-linux-gnu.tar.gz"
    dest: /tmp/bottom.tar.gz
  register: ytop_download
  become: true

- name: Extract bottom
  ansible.builtin.unarchive:
    src: /tmp/bottom.tar.gz
    dest: /usr/local/bin
    remote_src: yes
  when: ytop_download.changed
  become: true

- name: Set permissions for ytop
  ansible.builtin.file:
    path: /usr/local/bin/btm
    mode: '0755'
  when: ytop_download.changed
  become: true

- name: Install screenfetch (neofetch alternative)
  ansible.builtin.package:
    name: screenfetch
    state: present
  become: true

- name: Install Starship prompt
  ansible.builtin.get_url:
    url: https://starship.rs/install.sh
    dest: /tmp/install_starship.sh
  register: starship_download
  become: true

- name: Run Starship install script
  ansible.builtin.shell: |
    sh /tmp/install_starship.sh --yes
  args:
    creates: /usr/local/bin/starship
    executable: /bin/sh
  become: true
  when: starship_download.changed